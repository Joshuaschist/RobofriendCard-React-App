{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","toLowerCase","includes","length","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.88d6ff1d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn (\r\n    <div className='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?200*200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n         <p>{email}</p>\r\n      </div>\r\n    </div>\r\n    );\r\n}\r\n \r\nexport default Card; ","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\treturn (\r\n      <div>\r\n        {\r\n\t\t    robots.map((user, i) => {\r\n\t\t\treturn (  \r\n\t\t\t <Card \r\n\t\t\t key={i}\r\n\t\t\t id={robots[i].id}\r\n\t\t\t name={robots[i].name}\r\n\t\t\t email={robots[i].email}\r\n\t\t\t />\r\n\t\t      );\r\n\t\t    })\r\n        }\r\n\t  </div> \r\n    ); \r\n} \r\n\r\nexport default CardList; ","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\treturn (\r\n      <div className='pa2'>\t\t\r\n\t   <input\r\n         className='pa3 ba b--green bg-lightest-blue'\r\n\t     type='search' \r\n\t     placeholder='search robots'\r\n\t     onChange={searchChange}\r\n\t   />\r\n\t  </div> \r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n return (\r\n   <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\r\n   \t {props.children}\r\n   </div>\r\n );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\nconstructor() {\r\n\t  super()\r\n\t  this.state = {\r\n\t    robots: [],\r\n        searchfield: ''\r\n\t  }\r\n\t}\r\n\r\ncomponentDidMount() {\r\n\tfetch('https://jsonplaceholder.typicode.com/users') \r\n       .then(response => response.json())\r\n     \t.then(users => this.setState({ robots: users}));\r\n} \r\n\r\n  onSearchChange = (event) => {\r\n\t   this.setState({ searchfield: event.target.value })\t   \r\n  }   \r\n\r\n  render() {\r\n  \tconst { robots, searchfield } = this.state;\r\n\tconst filteredRobots = robots.filter(robots =>{\r\n     return robots.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    })\r\n    return !robots.length ?\r\n\t<h1>Loading</h1> :\r\n    (\r\n\t  <div className='tc'>\t\r\n\t\t\t<h1 className='f1'>Robofriends</h1>\r\n\t\t\t<SearchBox searchChange={this.onSearchChange}/>\t\r\n\t\t   <Scroll>\r\n\t\t\t<CardList robots={filteredRobots} />\r\n\t\t   </Scroll>\r\n\t  </div>\t\t\r\n      );\r\n  } \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n \nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();"],"sourceRoot":""}